(go run): Compiles and runs a Go program in a single command. This is useful for quick testing and development.

(go build): Compiles a Go program into an executable binary. The resulting binary can be run directly without the need for the Go toolchain.

(go test): Runs tests for a Go package. By default, it runs all tests in the package and its subpackages. You can use flags to specify which tests to run and how to format the output.

(go get): Downloads and installs a Go package and its dependencies. You can specify a package name or a URL to a Git repository.

(go mod init): Initializes a new Go module in the current directory. This creates a new go.mod file that tracks the module's dependencies and versions.

(go mod tidy): Cleans up a Go module's dependencies by removing unused modules and updating dependencies to their latest versions.

(go mod vendor): Copies a module's dependencies into a vendor directory, which allows the project to be built offline and ensures that the same versions of dependencies are used across builds.

(go mod): verify: Verifies that the dependencies of a Go module have not been modified since they were downloaded.

(go env): Prints information about the Go environment, such as the version of Go and the paths to important directories.

(go fmt): Formats Go source code according to the Go formatting conventions.

(go vet): Examines Go source code and reports suspicious constructs, such as code that is likely to be incorrect.

(go doc): Prints documentation for a Go package. You can specify a package name or a function name to get more specific documentation.

(go generate): Runs commands specified in Go source code comments. This is often used to generate code or data files based on templates or other sources.

(go clean): Cleans up a Go package's object files and other generated files. By default, it removes all files generated by the build process.