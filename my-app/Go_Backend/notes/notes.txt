🧞‍♂️🧞‍♂️🧞‍♂️ Tips for working with GO 🧞‍♂️🧞‍♂️🧞‍♂️

/* 🧞Feel free to add to this file to document any new functions or useful tips for using Golang or Mongo🧞 */

    - initialize go path to project (export GOPATH=/path/to/workspace)

    - remember to (go install) (see notes/go_commands.txt for list of useful go commands)

    - Capitalization matters
        - names that start with a capital letter are exported, which means they are visible and accessible from other packages,
        - while names that start with a lowercase letter are un-exported and can only be accessed within the same package.

    - importing modules from folders is done like the following example below
        - import(
            "Freel.com/folder/sub_folder/filename"
            )
            - Go to file.go from "Freel.com/" <- which is the base dir
            - do not include .go when importing Freel Go modules
            - use functions inside module Ex.( mongo.func_name(*possible params*) )

    - relative filepaths start at the beginning of the go project not from where that individual go module is 
        - EX. mongo.go function referencing the image in database/data/test_photo/photo1.jpg is referenced like 
        - ("database/test_photo/photo1.jpg")
    
    - Saving deletes unused imports with vscode extension 



/* 🧛🧛🧛Documentation For Go Modules and functions for accessing Mongo and Routing content for API🧛🧛🧛 */

(Running main Go module) 🏃‍♂️💨
- Run go project with go run main.go in toe GO_Backend folder (go run main.go) after cding into Go_Backend
    - main.go has all the Go functions built but commented out after i made them work once
    - main.go has test_user_id strings for the functions that require an existing user id
    - main.go access mongo Database with a URI this URI is stored in a .env file for security 
    - main.go initializes the gorilla mux router stored in module "Freel.com/router" (used to make rest api for database and frontend team)


(Other Freel created go modules)
    "Freel.com/router" 📍
    - router.go has the function InitializeRouter (router.InitializeRouter()) that starts a router that you can access in your browser
    - r.HandleFunc inside router.go stores different go functions that will be called at localhost:8081/whatever_the_path_is
    - Router.go contains mostly commented out functions that have not been properly setup to pass on data
    - The functions that are not commented have been tested once and use helper functions above the InitializeRouter function
    - I will be working on making more of these routes accessible and adding necessary features to the Go Modules called with gorilla mux 
    - this Routing page will create an API for the typescript front end to access database


    ("Freel.com/databases/mongo") 🧠
        - The module created to access info from the mongo Database
        - The functions in this module have all worked once 
        - Some functions in this module could probably be named in a more efficient way
        - *need to create functions to avoid the reuse of code and condense*


            *Functions that get either User or Content collections with mongo API (dont do anything rn but example)* 😓
	            mongo.Get_User_Collection()
	            mongo.Get_Content_Collection()

	        *Mongo Photo Functions* 📷
	            mongo.Upload_Pic(mongoURI)
	            mongo.Get_All_Photos(mongoURI)
	            mongo.Download_Photo(mongoURI)
	            mongo.Delete_Photo(id string, mongoURI)

            *Mongo User functions* 👱
	            mongo.Find_User_By_ID(test_user_input_id, mongoURI)



        "Freel.com/functions/location" 🪧
            - Module to query locational data of users using following functions

                - (location.Add_Location(mongoURI))
                    - function to change all users location /* used for reset abilities */


                - (location.Update_Location(mongoURI, test_user_input_id))
                    - function to update a specific users location based on userID


                - (location.All_User_In_10km(mongoURI, test_user_input_id))
                    - function to find all users in a specified distance given one users ID
                    - * needs to be changed to take in variable distance currently hard coded value*


                - (location.Distance_Between_Two_Users(mongoURI, test_user_input_id, test_user_input_id2))
                    - function to find distance (miles) between 2 user_id takes in user_id
                    - uses a helper function in mongo module
            


        "Freel.com/tester" 🧪
            - Module made for Go unit test and can be used if want to test a modules function independently*/
            - Currently empty *will updates notes file when used*
    


        "Freel.com/databases/data" 📃


            "Freel.com/databases/data/user 👥
                - (user.Insert_User(user User, URI_ string))
                    - Function to create new user 

                - (user.Create_Test_User(URI_ string))
                    - function to create test user

                - (user.Update_User_Bio(userID string, newBio string, URI_ string))
                    - function to update user bio for specified user


            "Freel.com.databases/data/post" 📬
                - folder just holds the template object type for posting photos
                - Not currently used and object is redeclare in each go module
                - post.go will hold more functions when I sort out the posting functions that are currently in the mongo module
        



/* 📭📭📭 Tips for accessing Mongo DB with Golang and tips for an optimized dataset 📬📬📬 */

access tips: 🚦
    - database has minor security settings for development (anyone can Get/Delete all data)
    - Connects to Mongo database with URI in .env file, get value with godotenv.Load() function commented out in main
    - The database name is "freel"
    - All photo data is currently sent to a GridFSBucket called photos
    - There are 2 collections named "Content" and "users" There are examples how to access them with mongo API
    - all other functions use golang functions with URI_ to connect to the mongo database
    - follow the template of other functions as there are mostly the same flow just different funcs or IDs utilized for different data
    - You can restructure the database using golang and the URI_ provided 


optimized storage techniques: 👌
    - Use indexing to speed up queries: For example, you can create an index on the user_id
        - field in your pictures collection to quickly retrieve all pictures posted by a particular user.

    - Store images as binary data:
        - Instead of storing images as files on disk and referencing their paths in the database
        - you can store the image data directly in the database as binary data. This allows you to easily retrieve and manipulate images
        - the MongoDB API.

    - Use GridFS for large files:
        - If you expect to store very large files (e.g. videos), you can use MongoDB's GridFS system
        - to split files into smaller chunks and store them in a separate collection. This allows you to efficiently retrieve
        - and stream large files without overwhelming your server.

    - Use sharding and replication for scalability: 
        - If your application grows to the point where a single MongoDB server is no longer sufficient,
        - you can use sharding and replication to distribute your data across multiple servers.
        - Sharding allows you to horizontally partition your data, while replication provides high availability
        - and automatic failover in case of server failures.